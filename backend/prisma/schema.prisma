generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  company   String?
  jobTitle  String?
  department String?
  location  String?
  timezone  String?    @default("America/New_York")
  bio       String?
  website   String?
  linkedin  String?
  twitter   String?
  avatar    String?
  isActive  Boolean    @default(true)
  resetToken String?
  resetTokenExpiry DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns     Campaign[]
  senders       Sender[]
  emailAccounts EmailAccount[]
}

model Campaign {
  id          String        @id @default(cuid())
  name        String
  description String?
  tags        String[]      @default([])
  subject     String
  content     String
  status      CampaignStatus @default(SENT)
  priority    CampaignPriority @default(MEDIUM)
  scheduledAt DateTime?
  timezone    String?       @default("UTC")
  sentAt      DateTime?
  userId      String
  senderId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  sender      Sender?       @relation(fields: [senderId], references: [id])
  recipients  Recipient[]
  analytics   Analytics?
}

model Sender {
  id        String     @id @default(cuid())
  name      String
  email     String
  password  String?
  host      String?
  port      Int?
  imapHost  String?
  imapPort  Int?
  popHost   String?
  popPort   Int?
  useSSL    Boolean?   @default(true)
  isVerified Boolean   @default(false)
  userId    String
  provider     EmailProvider @default(GMAIL)
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  tenantId     String?
  scope        String?    // OAuth scopes (e.g., "Mail.Send")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  campaigns Campaign[]
}

model Recipient {
  id         String   @id @default(cuid())
  email      String
  firstName  String?
  lastName   String?
  company    String?
  phone      String?
  status     RecipientStatus @default(SENT)
  campaignId String
  sentAt     DateTime?
  openedAt   DateTime?
  clickedAt  DateTime?
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

model Analytics {
  id           String   @id @default(cuid())
  campaignId   String   @unique
  totalSent    Int      @default(0)
  totalOpened  Int      @default(0)
  totalClicked Int      @default(0)
  totalBounced Int      @default(0)
  openRate     Float    @default(0)
  clickRate    Float    @default(0)
  bounceRate   Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  campaign     Campaign @relation(fields: [campaignId], references: [id])
}

model BlockList {
  id        String   @id @default(cuid())
  email     String   @unique
  reason    String?
  createdAt DateTime @default(now())
}

model EmailAccount {
  id          String   @id @default(cuid())
  userId      String
  email       String
  provider    String   // Gmail, Outlook, SMTP
  status      String   @default("connected") // connected, disconnected, error
  settings    Json?    // Store provider-specific settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  emails      Email[]
  
  @@unique([userId, email])
}

model Email {
  id            String       @id @default(cuid())
  emailAccountId String
  messageId     String       @unique // External message ID
  from          String
  fromName      String?
  to            String
  subject       String
  content       String       @db.Text
  preview       String?
  isRead        Boolean      @default(false)
  isStarred     Boolean      @default(false)
  folder        String       @default("inbox") // inbox, sent, draft, trash, etc.
  labels        String[]     @default([])
  receivedAt    DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  emailAccount  EmailAccount @relation(fields: [emailAccountId], references: [id])
  
  @@index([emailAccountId, folder])
  @@index([receivedAt])
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum RecipientStatus {
  PENDING
  SENT
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  FAILED
}

enum EmailProvider {
  SMTP
  GMAIL
  OUTLOOK
  IMAP
  POP3
}

enum CampaignPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}